#!/bin/bash

# Prevent launching in interactive shells
if [ $TERM != "linux" ]; then
    return
fi

# Prevent re-launching in login shells
if [ $NOLM ]; then
    return
fi

# Default settings
PS3="Select session: "
MODE="dialog"
HEIGHT=15
ITEMHEIGHT=5
WIDTH=55
XSESSIONS="$HOME/.config/blm/xsessions"
OSESSIONS="$HOME/.config/blm/osessions"
MENUS="$HOME/.config/blm/menus"

# Find the configuration file
if [ -f "$HOME/.config/blm/blm.conf" ]; then
    CONF="$HOME/.config/blm/blm.conf"
elif [ -f "$HOME/.blm.conf" ]; then
    CONF="$HOME/.blm.conf"
elif [ -f "/etc/blm.conf" ]; then
    CONF="/etc/blm.conf"
else
    echo "No config file found. Falling back to shell."
    return 1
fi

# Read user config (credit http://stackoverflow.com/a/20815951)
while IFS='= ' read lhs rhs
do
    if [[ ! $lhs =~ ^\ *# && -n $lhs ]]; then
        rhs="${rhs%%\#*}"    # Del in line right comments
        rhs="${rhs%%*( )}"   # Del trailing spaces
        rhs="${rhs%\"*}"     # Del opening string quotes
        rhs="${rhs#\"*}"     # Del closing string quotes
        declare $lhs="$rhs"
    fi
done < $CONF

# Get the current tty and an available display
function get_requirements {
    local display=0
    export DISPLAY=:0

    while [[ `xset -q` ]]; do
        ((display++))
        DISPLAY=:$display
    done
    clear

    DISPLAY=:$display
    TTY=`fgconsole`
}

# Prepare the items for the dialog menu
function get_dialog_menu_items {
    local i=1
    unset sessionMenuItems

    while [ $i -le ${#sessions[@]} ]; do
        sessionMenuItems=( ${sessionMenuItems[@]}\
                               $i ${sessions[$(( i - 1 ))]##*/} )
        ((i++))
    done
}

# Prepare the items for the (built-in) select menu
function get_select_menu_items {
    unset sessionMenuItems
    for session in ${sessions[@]}; do
        sessionMenuItems=( ${sessionMenuItems[@]} ${session##*/} )
    done
}

# Accumulate all sessions saved in the config folders and check if we have any
function get_sessions {
    shopt -s nullglob
    sessions=( $XSESSIONS/* $OSESSIONS/* $MENUS/* )
    if [ ${#sessions[@]} -eq 0 ]; then
        clear
        echo "No files found in $XSESSIONS, $OSESSIONS or $MENUS"
        echo "Please create .xinitrc-style, scripts that end in another\
 session exec'd, or directories containing such respectively, or set the\
 correct directories in the blm.conf file"
        echo "Falling back to shell"
        return 1
    fi
}

# Recursively select the session using bash select
function select_menu {
    clear
    get_sessions
    if [ $? -eq 1 ]; then
        return 1;
    fi
    get_select_menu_items
    menus=( $MENUS/* )
    menuN=${#menus[@]}

    select session in ${sessionMenuItems[@]}; do
        if [ $REPLY -le $(( ${#sessions[@]} - $menuN )) ]; then
            break
        else
            XSESSIONS="$MENUS/$session/xsessions"
            OSESSIONS="$MENUS/$session/osessions"
            MENUS="$MENUS/$session/menus"

            select_menu
            if [ $? -eq 1 ]; then
                return 1;
            fi
            break
        fi
    done
}

# Recursively select the session using dialog
function dialog_menu {
    get_sessions
    if [ $? -eq 1 ]; then
        return 1;
    fi
    get_dialog_menu_items
    menus=( $MENUS/* )
    menuN=${#menus[@]}

    dialog --title "blm" --menu "$PS3" $HEIGHT $WIDTH $ITEMHEIGHT\
           ${sessionMenuItems[@]} 2>/tmp/dialogpick

    if [ $? -eq 1 ]; then
        rm /tmp/dialogpick
        exit
    fi
    REPLY=`cat /tmp/dialogpick`
    rm /tmp/dialogpick

    if [ $REPLY -le $(( ${#sessions[@]} - $menuN )) ]; then
        return
    else
        XSESSIONS="${sessions[$(( $REPLY - 1 ))]}/xsessions"
        OSESSIONS="${sessions[$(( $REPLY - 1 ))]}/osessions"
        MENUS="${session[$(( $REPLY - 1 ))]}/menus"

        dialog_menu
        if [ $? -eq 1 ]; then
            return 1
        fi
        return
    fi
}

# Let the user pick the script they want to execute
if [ $MODE = "text" ]; then
    select_menu
    if [ $? -eq 1 ]; then
        return 1
    fi
else
    dialog_menu
    if [ $? -eq 1 ]; then
        return 1
    fi
fi
clear

# We need to know in which array this session was to avoid problems with
# duplicate file names
osessions=( $OSESSIONS/* )
osessionN=${#osessions[@]}
# If we subtract the number of menus we get the last index of all sessions
if [ $REPLY -le $(( ${#sessions[@]} - $osessionN - $menuN )) ]; then
    get_requirements
    exec /usr/bin/xinit ${sessions[$(( $REPLY - 1 ))]} -- $DISPLAY vt$TTY
else
    export NOLM=true
    exec ${sessions[$(( $REPLY - 1 ))]}
fi

# If we get here something went horribly wrong. Abort!
echo "Something went wrong. Falling back to shell."
return 1
